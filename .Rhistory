install.packages("quarto")
install.packages("sf")
install.packages("vembedr")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("corrplot")
install.packages("kableExtra")
install.packages("waffle")
?cgmquantify
??cgmquantify
library(ggplot2)
library(cgmquantify)
library(lubridate)
library(dplyr)
?cgmquantify
??cgmquantify
install_github(“marhenriq/cgmquantify”)
install_github(“marhenriq/cgmquantify”)
library(devtools)
install.packages("devtools")
library(devtools)
install_github(“marhenriq/cgmquantify”)
install_github(repo = "marhenriq/cgmquantify”)
install_github(repo = "marhenriq/cgmquantify")
install_github("marhenriq/cgmquantify")
library(cgmquantify)
df <- ("../../../../Downloads/dexcom.csv")
df <- read.csv("../../../../Downloads/dexcom.csv")
View(df)
plot_glucose(df)
View(df)
library(cgmquantify)
df <- read.csv("../../../../Downloads/dexcom.csv")
plot_glucose(df)
df <- read.csv("../../../../Downloads/dexcom.csv")
library(cgmquantify)
df <- read.csv("../../../../Downloads/dexcom.csv")
df <- read.csv("../../../../Downloads/dexcom.csv")
df <- read.csv("../../../../Downloads/dexcom.csv")
plot_glucose(df)
readfile(df)
readfile(filename = "../../../../Downloads/dexcom.csv")
readfile(filename = "../../../../Downloads/dexcom.csv")
df <- readfile(filename = "../../../../Downloads/dexcom.csv")
plot_gluocse(df)
plot_gluocose(df)
plot_glucose(df)
eA1c(df)
GMI(df)
df <- readfile(filename = "../../../../Downloads/dexcom.csv")
eA1c(df)
GMI(df)
df$glucose <- as.numeric(df$glucose)
eA1c(df)
# Load required libraries
library(ggplot2)
# Your data
DF <- data.frame(
group = rep(c("No Medical Experiences", "With Medical Conditions"), each = 10),
variable = rep(c("Sci_Ident_AVE_post", "Sci_Career_Mot_AVE_post", "Sci_Interest_Ave_post",
"Self_Determin_Ave_post", "Self_Efficacy_Ave_post", "Value_Peers_Ave_post",
"Sci_SenseOfBelong_Ave_post", "Sci_Engagement_Ave_post", "Communal_Sci_Ave_post"), 2),
mean_value = c(3.213, 3.976034858, 4.22875817, 3.832244009, 4.069716776, 3.980392157, 3.6961, 3.411764706, 4.479302832,
3.451, 4.203442879, 4.341158059, 4.064162754, 4.129890454, 4.009389671, 3.7336, 3.580594679, 4.546165884),
se = c(0.0892, 0.08335366, 0.072195795, 0.079721893, 0.064668306, 0.073231633, 0.07752, 0.088235294, 0.053792995,
0.0774, 0.069173946, 0.058711326, 0.061699455, 0.059621573, 0.069620237, 0.06439, 0.070060057, 0.03858848)
)
library(ggplot2)
library(ggplot2)
pre <- read.csv("rproj/2023_abrcms/pre.csv")
# Assuming 'post' is your data frame
# If not, replace 'post' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
pre$variable <- factor(pre$variable, levels = unique(pre$variable))
# Create a heatmap with borders
pre_heatmap <- ggplot(pre, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "yellow", high = "blue", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Pre-Semester", x = "", y = "", fill = "Mean")
# Print the heatmap
print(pre_heatmap)
# Load the required libraries
library(fmsb)
# Read your data from the CSV file
file_path <- "rproj/2023_abrcms/pre.csv"
data <- read.csv(file_path)
# Select only the relevant columns (group, variable, mean)
data_selected <- data[, c("group", "variable", "mean")]
# Reshape the data for spider chart
data_wide <- spread(data_selected, key = "variable", value = "mean")
# Load the required libraries
library(fmsb)
library(tidyr)
# Read your data from the CSV file
file_path <- "rproj/2023_abrcms/pre.csv"
data <- read.csv(file_path)
# Select only the relevant columns (group, variable, mean)
data_selected <- data[, c("group", "variable", "mean")]
# Reshape the data for spider chart
data_wide <- spread(data_selected, key = "variable", value = "mean")
# To use the fmsb package, add max and min values for each measure
data_wide <- rbind(rep(5, ncol(data_wide) - 1), rep(1, ncol(data_wide) - 1), data_wide[, -1])
# Color vectors for customization
colors_border <- c("#FFD133", "#3372FF")
colors_in <- adjustcolor(c("#FFD133", "#3372FF"), alpha.f = 0.4)
# Create the radar chart with customization options
radarchart(data_wide,
axistype = 1,
pcol = colors_border,
pfcol = colors_in,
plwd = 2,
plty = 1,
cglcol = "grey",
cglty = 1,
axislabcol = "grey",
caxislabels = seq(1, 5, 1),  # Adjust the axis labels as needed
cglwd = 0.8,
vlcex = 0.8,
vlcol = rep("gray", ncol(data_wide) - 1)
)
# Add legend
legend("bottomright", legend = c("With Medical Experiences", "No Medical Conditions"), fill = colors_in, border = colors_border, bty = "o", cex = .8)
# Add title
title(main = "Pre-Semester", col.main = "black", font.main = 3, cex.main = 1.2)
library(ggplot2)
post <- read.csv("rproj/2023_abrcms/post.csv")
# Assuming 'post' is your data frame
# If not, replace 'post' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
post$variable <- factor(post$variable, levels = unique(post$variable))
# Create a heatmap with borders
post_heatmap <- ggplot(post, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "magenta", high = "seagreen3", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Post-Semester", x = "", y = "", fill = "Mean")
# Print the heatmap
print(post_heatmap)
# Load the required libraries
library(fmsb)
# Read your data from the CSV file
file_path <- "rproj/2023_abrcms/post.csv"
data <- read.csv(file_path)
# Select only the relevant columns (group, variable, mean)
data_selected <- data[, c("group", "variable", "mean")]
# Reshape the data for spider chart
data_wide <- spread(data_selected, key = "variable", value = "mean")
# To use the fmsb package, add max and min values for each measure
data_wide <- rbind(rep(5, ncol(data_wide) - 1), rep(1, ncol(data_wide) - 1), data_wide[, -1])
# Color vectors for customization
colors_border <- c("#23b083", "#CC33FF")
colors_in <- adjustcolor(c("#23b083", "#CC33FF"), alpha.f = 0.4)
# Create the radar chart with customization options
radarchart(data_wide,
axistype = 1,
pcol = colors_border,
pfcol = colors_in,
plwd = 2,
plty = 1,
cglcol = "grey",
cglty = 1,
axislabcol = "grey",
caxislabels = seq(1, 5, 1),  # Adjust the axis labels as needed
cglwd = 0.8,
vlcex = 0.8,
vlcol = rep("gray", ncol(data_wide) - 1)
)
# Add legend
legend("bottomright", legend = c("With Medical Experiences", "No Medical Conditions"), fill = colors_in, border = colors_border, bty = "o", cex = .8)
# Add title
title(main = "Post-Semester", col.main = "black", font.main = 3, cex.main = 1.2)
library(ggplot2)
comp <- read.csv("rproj/2023_abrcms/comp.csv")
# Assuming 'comp' is your data frame
# If not, replace 'comp' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
comp$variable <- factor(comp$variable, levels = unique(comp$variable))
# Create a heatmap with borders
comp_heatmap <- ggplot(comp, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "tomato", high = "deepskyblue", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Comparison Pre/Post", x = "", y = "", fill = "Mean")
library(ggplot2)
comp <- read.csv("rproj/2023_abrcms/comp.csv")
# Assuming 'comp' is your data frame
# If not, replace 'comp' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
comp$variable <- factor(comp$variable, levels = unique(comp$variable))
# Create a heatmap with borders
comp_heatmap <- ggplot(comp, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "tomato", high = "deepskyblue", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Comparison Pre/Post", x = "", y = "", fill = "Mean")
# Print the heatmap
print(comp_heatmap)
# Load the required libraries
library(fmsb)
# Read your data from the CSV file
file_path <- "rproj/2023_abrcms/comp.csv"
data <- read.csv(file_path)
# Select only the relevant columns (group, variable, mean)
data_selected <- data[, c("group", "variable", "mean")]
# Reshape the data for spider chart
data_wide <- spread(data_selected, key = "variable", value = "mean")
# To use the fmsb package, add max and min values for each measure
data_wide <- rbind(rep(5, ncol(data_wide) - 1), rep(1, ncol(data_wide) - 1), data_wide[, -1])
# Color vectors for customization
colors_border <- c("#20839e", "#FF3347")
colors_in <- adjustcolor(c("#20839e", "#FF3347"), alpha.f = 0.4)
# Create the radar chart with customization options
radarchart(data_wide,
axistype = 1,
pcol = colors_border,
pfcol = colors_in,
plwd = 2,
plty = 1,
cglcol = "grey",
cglty = 1,
axislabcol = "grey",
caxislabels = seq(1, 5, 1),  # Adjust the axis labels as needed
cglwd = 0.8,
vlcex = 0.8,
vlcol = rep("gray", ncol(data_wide) - 1)
)
# Add legend
legend("bottomright", legend = c("Post-Semester", "Pre-Semester"), fill = colors_in, border = colors_border, bty = "o", cex = .8)
# Add title
title(main = "Pre/Post-Semester Comparison", col.main = "black", font.main = 3, cex.main = 1.2)
pre <- read.csv("rproj/2023_abrcms/pre.csv")
library(ggplot2)
pre <- read.csv("plots/pre-heatmap.png")
library(ggplot2)
pre <- read.csv("pre.csv")
# Assuming 'post' is your data frame
# If not, replace 'post' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
pre$variable <- factor(pre$variable, levels = unique(pre$variable))
# Create a heatmap with borders
pre_heatmap <- ggplot(pre, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "yellow", high = "blue", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Pre-Semester", x = "", y = "", fill = "Mean")
# Print the heatmap
print(pre_heatmap)
library(ggplot2)
post <- read.csv("post.csv")
# Assuming 'post' is your data frame
# If not, replace 'post' with the actual name of your data frame
# Convert the 'variable' column to a factor to ensure correct ordering
post$variable <- factor(post$variable, levels = unique(post$variable))
# Create a heatmap with borders
post_heatmap <- ggplot(post, aes(x = group, y = variable, fill = mean)) +
geom_tile(color = "black", size = 0.5, height = 0.75) +  # Add borders and adjust position
geom_text(aes(label = sprintf("%.2f", mean)), vjust = .5, size = 4, color = "white") +  # Add mean values
scale_fill_gradient(low = "magenta", high = "seagreen3", limits = c(1, 5)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.position = "bottom") +
labs(title = "Post-Semester", x = "", y = "", fill = "Mean")
# Print the heatmap
print(post_heatmap)
