major == "9" ~ "Computer_sci",
major == "10" ~ "Health_sci",
major == "3" ~ "Non_STEM",
major == "11" ~ "Other"))
df <- df %>%
mutate(career=case_when(career == "1" ~ "medical_doctor",
career == "4" ~ "dentist",
career == "5" ~ "health_care_pro",
career == "6" ~ "scientist",
career == "7" ~ "engineer",
career == "8" ~ "science_communicator",
career == "9" ~ "educator",
career == "10" ~ "technician",
career == "11" ~ "researcher",
career == "3" ~ "non_stem"))
df <- df %>%
mutate(gender=case_when(gender == "1" ~ "male",
gender == "2" ~ "trans_m",
gender == "5" ~ "trans_w",
gender == "6" ~ "female",
gender == "7" ~ "non_conforming",
gender == "8" ~ "intersex",
gender == "9" ~ "two_spirited",
gender == "10" ~ "prefer_not_answer",
gender == "11" ~ "other"))
df <- df %>%
mutate(ethnicity=case_when(ethnicity == "1" ~ "african_american",
ethnicity == "4" ~ "american_indian",
ethnicity == "5" ~ "arab",
ethnicity == "6" ~ "asian",
ethnicity == "7" ~ "latinx",
ethnicity == "8" ~ "biracial",
ethnicity == "9" ~ "pacific_islander",
ethnicity == "10" ~ "white",
ethnicity == "11" ~ "prefer_not_answer",
ethnicity == "12" ~ "other"))
df <- df[complete.cases(df),]
# Subplots for Adonis ####
si <- df %>%
select(starts_with("si"))
cm <- df %>%
select(starts_with("cm"))
im <- df %>%
select(starts_with("im"))
sd <- df %>%
select(starts_with("sd"))
# Load Packages####
library(tidyverse)
library(readxl)
library(easystats)
library(janitor)
library(modelr)
library(vegan)
# Read in data ####
df <- read_excel(file.choose("Projects/BIOL_3100/Data/Medical Conditions and Science Motivation Data 3.4.22.xlsx"))
df <- df %>%
janitor::clean_names()
df <- df %>%
select(-index,-semester,-type,-course,-pre_post) %>%
select(-starts_with("resilience"))
df <- df %>%
mutate(major=case_when(major == "1" ~ "Biology",
major == "4" ~ "Chemistry",
major == "5" ~ "Earth_sci",
major == "6" ~ "Mathematics",
major == "7" ~ "Physics",
major == "8" ~ "Engineering",
major == "9" ~ "Computer_sci",
major == "10" ~ "Health_sci",
major == "3" ~ "Non_STEM",
major == "11" ~ "Other"))
df <- df %>%
mutate(career=case_when(career == "1" ~ "medical_doctor",
career == "4" ~ "dentist",
career == "5" ~ "health_care_pro",
career == "6" ~ "scientist",
career == "7" ~ "engineer",
career == "8" ~ "science_communicator",
career == "9" ~ "educator",
career == "10" ~ "technician",
career == "11" ~ "researcher",
career == "3" ~ "non_stem"))
df <- df %>%
mutate(gender=case_when(gender == "1" ~ "male",
gender == "2" ~ "trans_m",
gender == "5" ~ "trans_w",
gender == "6" ~ "female",
gender == "7" ~ "non_conforming",
gender == "8" ~ "intersex",
gender == "9" ~ "two_spirited",
gender == "10" ~ "prefer_not_answer",
gender == "11" ~ "other"))
df <- df %>%
mutate(ethnicity=case_when(ethnicity == "1" ~ "african_american",
ethnicity == "4" ~ "american_indian",
ethnicity == "5" ~ "arab",
ethnicity == "6" ~ "asian",
ethnicity == "7" ~ "latinx",
ethnicity == "8" ~ "biracial",
ethnicity == "9" ~ "pacific_islander",
ethnicity == "10" ~ "white",
ethnicity == "11" ~ "prefer_not_answer",
ethnicity == "12" ~ "other"))
df <- df[complete.cases(df),]
# Subplots for Adonis ####
si <- df %>%
select(starts_with("si"))
cm <- df %>%
select(starts_with("cm"))
im <- df %>%
select(starts_with("im"))
sd <- df %>%
select(starts_with("sd"))
se <- df %>%
select(starts_with("se"))
gm <- df %>%
select(starts_with("gm"))
sci_comp <- df %>%
select(starts_with("sci_comp"))
per_comm_orient <- df %>%
select(starts_with("per_comm_orient"))
sci_comm_orient <- df %>%
select(starts_with("sci_comm_orient"))
demo <- df %>%
select(major,gender,career,ethnicity,parents_grad_college,dependents,med_condition,med_condition_dependent)
questions <- df %>%
select(-major,-gender,-career,-ethnicity,-parents_grad_college,-dependents,-med_condition,-med_condition_dependent)
mysubsetMDS <- function(x){
mysubset <- df %>%
select(starts_with(x))
meta <- metaMDS(mysubset)
MDS_df <- data.frame(MDS1=meta$points[,1],MDS2=meta$points[,2]) %>%
cbind(demo)
return(MDS_df)
}
install.packages("png")
install.packages("grid")
install.packages("vembedr")
install.packages("vembedr")
install.packages("DT")
install.packages("xfun")
install.packages("shiny")
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input,output,session) {
}
shinyApp(ui, server)
runApp('C:/Users/10768192/Desktop/this_is_a_test')
rm(list = ls())
ls()
myfun <- function(x)(x+7)
myfun2 <- function(x)(x*7)
install.packages("devtools")
library(pPractice)
install.packages("testthat")
install.packages("testthat")
notes <- readLines("../School/Ashley Arizona.txt")
notes <- gsub("header.*", "", notes) # replace header with nothing
notes <- gsub("footer.*", "", notes) # replace footer with nothing
install.packages("tm")
library(tm)
corpus <- VCorpus(VectorSource(notes))
tdm <- TermDocumentMatrix(corpus)
freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE)
install.packages("wordcloud")
library(wordcloud)
wordcloud(names(freq), freq, min.freq = 2, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 2, random.order = FALSE)
install.packages("waffle")  # Install the "waffle" package if needed
library(waffle)  # Load the "waffle" package
library(grid)  # Load the "grid" package
career_data <- data.frame(
Career_Aspiration = c("Doctor", "Dentist", "Health Care Professional", "STEM Professional", "Non-STEM"),
Value = c(51, 28, 80, 77, 154)
)
# Determine the total number of squares required
total_squares <- sum(career_data$Value)
# Create a function to generate rectangles as glyphs
create_rectangle_glyph <- function(n) {
rectangles <- rep(1, n)
list(
x = rep(1, n),
y = rep(1, n),
width = rectangles,
height = rectangles,
gp = gpar(fill = "#619CFF")  # Adjust the fill color of the rectangles
)
}
waffle(
create_rectangle_glyph(total_squares),
rows = 10,
use_glyph = FALSE,  # Disable using glyphs
legend_pos = "bottom",
title = "Career Aspirations"
)
# Add legend manually
legend("bottom",
legend = career_data$Career_Aspiration,
fill = "#619CFF",  # Adjust the fill color of the legend labels
horiz = TRUE,
cex = 0.8,
inset = 0.05
)
# Load the waffle package
library(waffle)
# Create a data frame with the given data
data <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Count" = c(167, 223)
)
# Create a waffle chart with customized legend labels
waffle(data$Count, rows = 10, colors = c("#F8766D", "#00BFC4"),
size = 0.7, groups = c("No", "Yes"), legend_pos = "bottom",
title = "Medical Experience?")
# Load the waffle package
library(waffle)
# Create a data frame with the given data
data <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Count" = c(167, 223)
)
# Create a waffle chart
waffle(data$Count, rows = 10, colors = c("#F8766D", "#00BFC4"),
size = 0.7, legend_pos = "bottom", title = "Medical Experience?")
# Customize the legend labels
legend_labels <- c("No", "Yes")
legend_title <- "Medical Experience?"
waffle:::draw_legend(legend_labels, fill = c("#F8766D", "#00BFC4"),
title = legend_title, size = 0.7)
# Load the required packages
library(waffle)
library(ggplot2)
# Create a data frame with the given data
data <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Count" = c(167, 223)
)
# Create a waffle chart using ggplot2
waffle_chart <- ggplot(data, aes(fill = `Medical Experience?`, values = Count)) +
geom_waffle(n_rows = 10, flip = TRUE, color = "white", size = 0.5) +
scale_fill_manual(values = c("#F8766D", "#00BFC4"), labels = c("No", "Yes")) +
theme_void() +
labs(title = "Medical Experience?")
# Load the waffle package
library(waffle)
# Create a data frame with the given data
data <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Count" = c(167, 223)
)
# Create a waffle chart
waffle(data$Count, rows = 10, colors = c("#F8766D", "#00BFC4"),
size = 0.7, legend_pos = "bottom", title = "Medical Experience?")
# Customize the legend labels
legend_labels <- c("No", "Yes")
legend_color <- c("#F8766D", "#00BFC4")
legend_title <- "Medical Experience?"
waffle:::draw_legend(legend_labels, fill = legend_color,
title = legend_title, size = 0.7)
# Load the required packages
library(waffle)
library(ggplot2)
# Create a data frame with the given data
data <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Count" = c(167, 223)
)
# Create a waffle chart without a legend
waffle_chart <- ggplot(data, aes(fill = `Medical Experience?`, values = Count)) +
geom_waffle(n_rows = 10, flip = TRUE, color = "white", size = 0.5) +
theme_void() +
labs(title = "Medical Experience?")
# Add a custom legend on top of the waffle chart
legend <- data.frame(
"Medical Experience?" = c("No", "Yes"),
"Color" = c("#F8766D", "#00BFC4"),
stringsAsFactors = FALSE
)
waffle_chart_with_legend <- waffle_chart +
geom_tile(data = legend, aes(x = 0, y = 0, fill = Color),
width = 0.4, height = 0.4, inherit.aes = FALSE) +
geom_text(data = legend, aes(x = 0, y = 0, label = `Medical Experience?`),
color = "black", size = 4, vjust = -0.5, inherit.aes = FALSE) +
theme(plot.margin = margin(15, 0, 0, 0)) +
guides(fill = FALSE)
# Create a waffle chart without a legend
waffle_chart <- ggplot(data, aes(fill = `Medical Experience?`, values = Count)) +
geom_waffle(n_rows = 10, flip = TRUE, color = "white", size = 0.5) +
theme_void() +
labs(title = "Medical Experience?")
# Load the 'waffle' package
library(waffle)
# Create a data frame with the values and labels
data <- data.frame(
"Medical Experience" = c("No", "Yes"),
"Percentage" = c(42.82051282, 57.17948718)
)
# Set the total number of squares for the waffle chart
total_squares <- 100
# Calculate the number of squares for each category based on the percentages
data$squares <- round(data$Percentage/100 * total_squares)
# Create the waffle chart
waffle(
data$squares,
rows = 10,  # Number of rows in the chart
size = 0.7,  # Size of each square
colors = c("#FFC0CB", "#6495ED"),  # Colors for the categories
use_glyph = "square"  # Use square glyph for squares
)
# Create a data frame with the values and labels
data <- data.frame(
"Medical Experience" = c("No", "Yes"),
"Percentage" = c(42.82051282, 57.17948718)
)
# Set the total number of squares for the waffle chart
total_squares <- 100
# Calculate the number of squares for each category based on the percentages
data$squares <- round(data$Percentage/100 * total_squares)
# Set the colors for each category
colors <- c("#FFC0CB", "#6495ED")
# Create a vector of colors based on the number of squares for each category
col_vector <- rep(colors, data$squares)
# Create a matrix representing the waffle chart layout
waffle_matrix <- matrix(col_vector, nrow = 10, byrow = TRUE)
# Plot the waffle chart using base R graphics
plot(0, type = "n", xlim = c(0, 10), ylim = c(0, 10),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Draw the waffle chart squares
rect(1:10, rep(1:10, each = 10), col = waffle_matrix, border = "white")
# Create a data frame with the values and labels
data <- data.frame(
"Medical Experience" = c("No", "Yes"),
"Percentage" = c(42.82051282, 57.17948718)
)
# Set the total number of squares for the waffle chart
total_squares <- 100
# Calculate the number of squares for each category based on the percentages
data$squares <- round(data$Percentage/100 * total_squares)
# Set the colors for each category
colors <- c("#FFC0CB", "#6495ED")
# Create a vector of colors based on the number of squares for each category
col_vector <- rep(colors, data$squares)
# Create a matrix representing the waffle chart layout
waffle_matrix <- matrix(col_vector, nrow = 10, byrow = TRUE)
# Plot the waffle chart using base R graphics
plot(0, type = "n", xlim = c(0, 10), ylim = c(0, 10),
xlab = "", ylab = "", xaxt = "n", yaxt = "n")
# Draw the waffle chart squares
rect(xleft = rep(1:10, each = 10), ybottom = rep(1:10, 10),
xright = rep(1:10, each = 10) + 1, ytop = rep(1:10, 10) + 1,
col = waffle_matrix, border = "white")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
install.packages("waffle","ggplot2")
install.packages("waffle","ggplot2")
install.packages("waffle")
install.packages("ggplot2")
library(ggplot2)
library(waffle)
data <- c('Yes' = 57,
'No' = 43)
waffle(data,
rows = 10,
size = .06,
colors = c("green","blue"),
title = "Have you had a medical experience?")
library(ggplot2)
library(waffle)
data <- c('Yes' = 57,
'No' = 43)
waffle(data,
rows = 10,
size = .06,
colors = c("green","blue"),
title = "Have you had a medical experience?") +
theme(legend.position = "bottom")
?netplot
??netplot
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Number of Medical Interruptions", y = "Mean") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 24.166667
height <- 17.5
# Save the combined plot as a PNG file
ggsave(file = paste0(file_path, file_name), plot = combined_plot, width = width, height = height)
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Number of Medical Interruptions", y = "Mean") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Save the combined plot as a PNG file
ggsave(file = paste0(file_path, file_name), plot = combined_plot, width = width, height = height)
