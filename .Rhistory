corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = colors)
# Install and load the 'readr' package for reading the data
# install.packages("readr")
library(readr)
library(corrplot)
# Create a variable with the dataset
data <- "Variable,Science Identity,Science Engagement,Sci. Sense of Belonging,Career Motivation,Science Interest,Self-Determination,Self-Efficacy,Value of Peers,Community in Science,Medical Interruptions
Science Identity,1,.664**,.602**,.579**,.676**,.452**,.523**,.110*,.261**,-0.001
Science Engagement,.664**,1,.601**,.507**,.609**,.448**,.454**,.158**,.285**,0.102
Sci. Sense of Belonging,.602**,.601**,1,.471**,.583**,.497**,.532**,.312**,.315**,-.150*
Career Motivation,.579**,.507**,.471**,1,.581**,.425**,.440**,.247**,.257**,0.006
Science Interest,.676**,.609**,.583**,.581**,1,.520**,.500**,.189**,.343**,0.029
Self-Determination,.452**,.448**,.497**,.425**,.520**,1,.509**,.260**,.221**,-0.095
Self-Efficacy,.523**,.454**,.532**,.440**,.500**,.509**,1,.201**,.216**,-.164*
Value of Peers,.110*,.158**,.312**,.247**,.189**,.260**,.201**,1,.214**,0.004
Community in Science,.261**,.285**,.315**,.257**,.343**,.221**,.216**,.214**,1,-0.013
Medical Interruptions,-0.001,0.102,-.150*,0.006,0.029,-0.095,-.164*,0.004,-0.013,1"
# Read the data into a dataframe
df <- read.csv(text = data, check.names = FALSE)
# Remove the asterisks and convert the columns to numeric
df[-1] <- sapply(df[-1], function(x) as.numeric(gsub("\\**", "", x)))
# View the reformatted dataframe
df
# Create a subset of the dataframe without the first row and column
df_subset <- df[-1, -1]
# Extract the labels for the columns from the first row of df
col_labels <- unname(df[1, -1])
# Extract the labels for the rows from the first column of df
row_labels <- unname(df[-1, 1])
# Convert the subset to a correlation matrix
corr_matrix <- cor(df_subset)
# Define the bottom and top colors for the gradient
bottom_color <- "#074EAB"
top_color <- "#275d38"
special_color <- "#FF0000"  # Define a special color for correlation = 1
# Create a gradient of colors from bottom to top, passing through white
n_colors <- 100  # Number of colors in the gradient
colors <- c(colorRampPalette(c(bottom_color, "white"))(n_colors / 2), colorRampPalette(c("white", top_color))(n_colors / 2))
# Create a color vector for the correlation matrix
color_vector <- ifelse(corr_matrix == 1, special_color, colors)
# Create the correlation plot using corrplot with the color vector
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = color_vector)
# Install and load the 'readr' package for reading the data
# install.packages("readr")
library(readr)
library(corrplot)
# Create a variable with the dataset
data <- "Variable,Science Identity,Science Engagement,Sci. Sense of Belonging,Career Motivation,Science Interest,Self-Determination,Self-Efficacy,Value of Peers,Community in Science,Medical Interruptions
Science Identity,1,.664**,.602**,.579**,.676**,.452**,.523**,.110*,.261**,-0.001
Science Engagement,.664**,1,.601**,.507**,.609**,.448**,.454**,.158**,.285**,0.102
Sci. Sense of Belonging,.602**,.601**,1,.471**,.583**,.497**,.532**,.312**,.315**,-.150*
Career Motivation,.579**,.507**,.471**,1,.581**,.425**,.440**,.247**,.257**,0.006
Science Interest,.676**,.609**,.583**,.581**,1,.520**,.500**,.189**,.343**,0.029
Self-Determination,.452**,.448**,.497**,.425**,.520**,1,.509**,.260**,.221**,-0.095
Self-Efficacy,.523**,.454**,.532**,.440**,.500**,.509**,1,.201**,.216**,-.164*
Value of Peers,.110*,.158**,.312**,.247**,.189**,.260**,.201**,1,.214**,0.004
Community in Science,.261**,.285**,.315**,.257**,.343**,.221**,.216**,.214**,1,-0.013
Medical Interruptions,-0.001,0.102,-.150*,0.006,0.029,-0.095,-.164*,0.004,-0.013,1"
# Read the data into a dataframe
df <- read.csv(text = data, check.names = FALSE)
# Remove the asterisks and convert the columns to numeric
df[-1] <- sapply(df[-1], function(x) as.numeric(gsub("\\**", "", x)))
# View the reformatted dataframe
df
# Create a subset of the dataframe without the first row and column
df_subset <- df[-1, -1]
# Extract the labels for the columns from the first row of df
col_labels <- unname(df[1, -1])
# Extract the labels for the rows from the first column of df
row_labels <- unname(df[-1, 1])
# Convert the subset to a correlation matrix
corr_matrix <- cor(df_subset)
# Define the bottom and top colors for the gradient
bottom_color <- "#074EAB"
top_color <- "#275d38"
special_color <- "#FF0000"  # Define a special color for correlation = 1
# Create a color matrix for the correlation plot
color_matrix <- matrix(colors, nrow = nrow(corr_matrix), ncol = ncol(corr_matrix))
color_matrix[corr_matrix == 1] <- special_color
# Create the correlation plot using corrplot with the color matrix
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = color_matrix)
# Install and load the 'readr' package for reading the data
# install.packages("readr")
library(readr)
library(corrplot)
# Create a variable with the dataset
data <- "Variable,Science Identity,Science Engagement,Sci. Sense of Belonging,Career Motivation,Science Interest,Self-Determination,Self-Efficacy,Value of Peers,Community in Science,Medical Interruptions
Science Identity,1,.664**,.602**,.579**,.676**,.452**,.523**,.110*,.261**,-0.001
Science Engagement,.664**,1,.601**,.507**,.609**,.448**,.454**,.158**,.285**,0.102
Sci. Sense of Belonging,.602**,.601**,1,.471**,.583**,.497**,.532**,.312**,.315**,-.150*
Career Motivation,.579**,.507**,.471**,1,.581**,.425**,.440**,.247**,.257**,0.006
Science Interest,.676**,.609**,.583**,.581**,1,.520**,.500**,.189**,.343**,0.029
Self-Determination,.452**,.448**,.497**,.425**,.520**,1,.509**,.260**,.221**,-0.095
Self-Efficacy,.523**,.454**,.532**,.440**,.500**,.509**,1,.201**,.216**,-.164*
Value of Peers,.110*,.158**,.312**,.247**,.189**,.260**,.201**,1,.214**,0.004
Community in Science,.261**,.285**,.315**,.257**,.343**,.221**,.216**,.214**,1,-0.013
Medical Interruptions,-0.001,0.102,-.150*,0.006,0.029,-0.095,-.164*,0.004,-0.013,1"
# Read the data into a dataframe
df <- read.csv(text = data, check.names = FALSE)
# Remove the asterisks and convert the columns to numeric
df[-1] <- sapply(df[-1], function(x) as.numeric(gsub("\\**", "", x)))
# View the reformatted dataframe
df
# Create a subset of the dataframe without the first row and column
df_subset <- df[-1, -1]
# Extract the labels for the columns from the first row of df
col_labels <- unname(df[1, -1])
# Extract the labels for the rows from the first column of df
row_labels <- unname(df[-1, 1])
# Convert the subset to a correlation matrix
corr_matrix <- cor(df_subset)
# Define the bottom and top colors for the gradient
bottom_color <- "#074EAB"
top_color <- "#275d38"
special_color <- "#FF0000"  # Define a special color for correlation = 1
# Create a color matrix for the correlation plot
color_matrix <- matrix(colors, nrow = nrow(corr_matrix), ncol = ncol(corr_matrix))
color_matrix[corr_matrix == 1] <- special_color
# Convert the correlation matrix to character strings
corr_matrix_chars <- as.character(corr_matrix)
# Create the correlation plot using corrplot with the color matrix
corrplot(corr_matrix_chars, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = color_matrix)
# Read the data into a dataframe
df <- read.csv(text = data, check.names = FALSE)
# Remove the asterisks and convert the columns to numeric
df[-1] <- sapply(df[-1], function(x) as.numeric(gsub("\\**", "", x)))
# View the reformatted dataframe
df
# Create a subset of the dataframe without the first row and column
df_subset <- df[-1, -1]
# Extract the labels for the columns from the first row of df
col_labels <- unname(df[1, -1])
# Extract the labels for the rows from the first column of df
row_labels <- unname(df[-1, 1])
# Convert the subset to a correlation matrix
corr_matrix <- cor(df_subset)
# Define the bottom and top colors for the gradient
bottom_color <- "#074EAB"
top_color <- "#275d38"
# Create a gradient of colors from bottom to top, passing through white
n_colors <- 100  # Number of colors in the gradient
colors <- c(colorRampPalette(c(bottom_color, "white"))(n_colors / 2), colorRampPalette(c("white", top_color))(n_colors / 2))
# Create the correlation plot using corrplot with the gradient colors
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = colors)
## To Save####
# Save the plot as a PNG file
png(file = "Projects/2023_saber/plots/correlations.png", width = 800, height = 600, bg = "transparent")
# Plot the correlation matrix
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = colors)
# Close the PNG device
dev.off()
# Install and load the 'readr' package for reading the data
# install.packages("readr")
library(readr)
library(corrplot)
# Create a variable with the dataset
data <- "Variable,Science Identity,Science Engagement,Sci. Sense of Belonging,Career Motivation,Science Interest,Self-Determination,Self-Efficacy,Value of Peers,Community in Science,Medical Interruptions
Science Identity,1,.664**,.602**,.579**,.676**,.452**,.523**,.110*,.261**,-0.001
Science Engagement,.664**,1,.601**,.507**,.609**,.448**,.454**,.158**,.285**,0.102
Sci. Sense of Belonging,.602**,.601**,1,.471**,.583**,.497**,.532**,.312**,.315**,-.150*
Career Motivation,.579**,.507**,.471**,1,.581**,.425**,.440**,.247**,.257**,0.006
Science Interest,.676**,.609**,.583**,.581**,1,.520**,.500**,.189**,.343**,0.029
Self-Determination,.452**,.448**,.497**,.425**,.520**,1,.509**,.260**,.221**,-0.095
Self-Efficacy,.523**,.454**,.532**,.440**,.500**,.509**,1,.201**,.216**,-.164*
Value of Peers,.110*,.158**,.312**,.247**,.189**,.260**,.201**,1,.214**,0.004
Community in Science,.261**,.285**,.315**,.257**,.343**,.221**,.216**,.214**,1,-0.013
Medical Interruptions,-0.001,0.102,-.150*,0.006,0.029,-0.095,-.164*,0.004,-0.013,1"
# Read the data into a dataframe
df <- read.csv(text = data, check.names = FALSE)
# Remove the asterisks and convert the columns to numeric
df[-1] <- sapply(df[-1], function(x) as.numeric(gsub("\\**", "", x)))
# View the reformatted dataframe
df
# Create a subset of the dataframe without the first row and column
df_subset <- df[-1, -1]
# Extract the labels for the columns from the first row of df
col_labels <- unname(df[1, -1])
# Extract the labels for the rows from the first column of df
row_labels <- unname(df[-1, 1])
# Convert the subset to a correlation matrix
corr_matrix <- cor(df_subset)
# Define the bottom and top colors for the gradient
bottom_color <- "#074EAB"
top_color <- "#275d38"
# Create a gradient of colors from bottom to top, passing through white
n_colors <- 100  # Number of colors in the gradient
colors <- c(colorRampPalette(c(bottom_color, "white"))(n_colors / 2), colorRampPalette(c("white", top_color))(n_colors / 2))
# Create the correlation plot using corrplot with the gradient colors
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = colors)
## To Save####
# Save the plot as a PNG file
png(file = "Projects/2023_saber/plots/correlations.png", width = 800, height = 600, bg = "transparent")
# Plot the correlation matrix
corrplot(corr_matrix, type = 'lower', method = 'color', tl.col = "black", tl.srt = 45, col = colors)
# Close the PNG device
dev.off()
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Number of Medical Interruptions", y = "Mean") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Number of Medical Interruptions", y = "Pre/Post Semester Change") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Rate of Medical Interruptions", y = "Pre/Post Semester Change") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Rate of Medical Interruptions", y = "Pre/Post Semester Change") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Load required packages
library(ggplot2)
library(dplyr)
library(gridExtra)
# Create a data frame from the provided .csv data
data <- read.csv("Projects/2023_saber/data/pre_post.csv")
# Rename the columns
colnames(data) <- c("interruptions", "Pair", "Mean", "Std.Deviation", "Std.Error.Mean",
"Lower", "Upper", "t", "df", "Sig")
# Get unique pair names
pair_names <- unique(data$Pair)
# List to store individual graphs
graphs <- list()
# New names for the pairs
new_pair_names <- c("Science Identity", "Science Career Motivation", "Science Interest",
"Self-Determination", "Self-Efficacy", "Community in Science")
# Define the color gradient
color_gradient <- colorRampPalette(c("#96c48f", "#136307"))
# Generate graphs for each pair
for (i in seq_along(pair_names)) {
# Filter data for the specific pair
pair_data <- data %>%
filter(Pair == pair_names[i])
# Filter significant data points (Sig <= 0.05)
sig_data <- pair_data %>%
filter(Sig <= 0.05)
# Create plot for the specific pair
plot <- ggplot(pair_data, aes(x = factor(interruptions), y = Mean, fill = factor(interruptions))) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = Mean - Std.Error.Mean, ymax = Mean + Std.Error.Mean),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Rate of Medical Interruptions", y = "Pre/Post Semester Change") +
ggtitle(new_pair_names[i]) +
scale_fill_manual(values = color_gradient(length(unique(pair_data$interruptions)))) +
theme_minimal() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA))
# Add significance points to the plot
if (nrow(sig_data) > 0) {
plot <- plot +
geom_point(data = sig_data, aes(y = Mean + Std.Error.Mean + 0.2), shape = 16, size = 3, color = "black")
}
# Store the plot in the list
graphs[[i]] <- plot
}
# Combine graphs into a grid
combined_plot <- grid.arrange(grobs = graphs, nrow = 3, ncol = 2, padding = unit(10, "cm"))
# Display the combined plot
print(combined_plot)
# Specify the file path and name
file_path <- "Projects/2023_saber/plots/"
file_name <- "pre_post_mean.PNG"
# Set the width and height in inches
width <- 17.5
height <- 24.166667
# Save the combined plot as a PNG file
ggsave(file = paste0(file_path, file_name), plot = combined_plot, width = width, height = height)
# color pal####
"#275d38"
"#8BD8F0"
"#A6D19F"
"#A391CF"
"#074EAB"
"#BA56CC"
"#25B81D"
"#76A398"
# medical experience waffle####
library(waffle)
# Define the data
medical_experience <- c(
"No" = 167,
"Yes" = 223
)
# Calculate the counts based on a 10x10 grid
counts <- round(medical_experience / sum(medical_experience) * 100)
# Define colors for each category
experience_colors <- c(
"No" = "#8BD8F0",
"Yes" = "#275d38"
)
# Create the waffle chart
chart <- waffle(counts,
rows = 5,  # Number of rows in the chart
colors = experience_colors,  # Colors for each category
size = 0.7,  # Size of each waffle block
title = "Medical Experience") + # Chart title
theme(legend.position = "bottom")  # Move legend to the bottom of the graph
chart
# Set the file path
file_path <- "Projects/2023_saber/plots/medical.png"
width <- 1050
height <- 330
# Save the chart as a PNG file with specified dimensions
png(file_path, width = width, height = height, res = 96)
print(chart)
dev.off()
